import React, { useState, useEffect } from "react";
import ModuleBlock from "@/Components/ModuleBlock/ModuleBlock";
import styles from "./styles.module.css";
import arrowIcon from "@/assets/icons/common/arrowIcon.svg";
import Button from "@/Components/ElementUi/Button/Button";
import Loader from "@/Components/ElementUi/Loader/Loader";

// –¢–∏–ø—ã
interface OverviewCourseProps {
  courseId: number;              // ID –∫—É—Ä—Å–∞ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è)
  csId: number;                  // ID —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞
  onBack: () => void;            // –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
  onNext?: () => void;           // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
  setModules?: (modules: ModuleItem[]) => void; // –§—É–Ω–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π "–Ω–∞–≤–µ—Ä—Ö"
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —É—Ä–æ–∫–∞, —Ç–µ—Å—Ç–∞, –∑–∞–¥–∞—á–∏, –º–æ–¥—É–ª—è
interface Lesson {
  id: number;
  lesson: string;        // –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ (–¥–ª—è ModuleBlock)
  description: string;   // –¢–µ–∫—Å—Ç/HTML
}
interface Test {
  test: string;
  description: string;
}
interface Task {
  name: string;
  description?: string;
}
interface ModuleItem {
  id: number;
  title: string;
  lessons: Lesson[];
  tests: Test[];
  tasks: Task[];
  loadingLessons?: boolean;
}

const OverviewCourse: React.FC<OverviewCourseProps> = ({
  courseId,
  csId,
  onBack,
  onNext,
  setModules,
}) => {
  const [modules, setLocalModules] = useState<ModuleItem[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    let abort = false;

    (async () => {
      try {
        setLoading(true);
        console.log("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π (GET /generate_modules)...");

        // 1) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        const generateUrl = `http://127.0.0.1:8000/api/courses/${courseId}/generate_modules?cs_id=${csId}`;
        const genResp = await fetch(generateUrl);
        if (!genResp.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π");
        }
        const genData = await genResp.json();
        console.log("‚úÖ generate_modules –æ—Ç–≤–µ—Ç:", genData);

        // 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —á–µ—Ä–µ–∑ CRUD
        console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π (GET /courses/{courseId}/modules/)...");
        const modsListResp = await fetch(
          `http://127.0.0.1:8000/api/courses/${courseId}/modules/`
        );
        if (!modsListResp.ok) {
          throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π");
        }
        const modsList = await modsListResp.json(); // [{ id, title, course_id }, ...]

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ local-—Å—Ç–µ–π—Ç
        let loadedModules: ModuleItem[] = modsList.map((mod: any) => ({
          id: mod.id,
          title: mod.title,
          lessons: [],
          tests: [],
          tasks: [],
        }));

        // 3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤ + –∑–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤
        for (const moduleItem of loadedModules) {
          console.log(
            `üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è ID=${moduleItem.id}, title=${moduleItem.title}`
          );

          // generate_module_lessons —á–µ—Ä–µ–∑ query, —Ç.–∫. backend = Depends()
          const genLessonsUrl =
            `http://127.0.0.1:8000/api/courses/${courseId}/generate_module_lessons?cs_id=${csId}` +
            `&module_id=${moduleItem.id}&module_title=${encodeURIComponent(moduleItem.title)}`;
          const genLessonsResp = await fetch(genLessonsUrl, {
            method: "POST",
          });
          if (!genLessonsResp.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–æ–≤");
          }
          const genLessonsData = await genLessonsResp.json();
          console.log("–£—Ä–æ–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:", genLessonsData);

          // 4) –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ (CRUD)
          console.log(
            `üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫–∏ –∏–∑ /courses/${courseId}/modules/${moduleItem.id}/lessons/`
          );
          const lessonsResp = await fetch(
            `http://127.0.0.1:8000/api/courses/${courseId}/modules/${moduleItem.id}/lessons/`
          );
          if (!lessonsResp.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–æ–≤");
          }
          const lessonsData = await lessonsResp.json(); // [{ id, title, description, module_id }, ...]

          const typedLessons = lessonsData.map((ls: any) => ({
            id: ls.id,
            lesson: ls.title,
            description: ls.description,
          }));

          moduleItem.lessons = typedLessons;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª–∏ –≤ —Å—Ç–µ–π—Ç
        if (!abort) {
          setLocalModules(loadedModules);
          if (setModules) {
            setModules(loadedModules); // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –Ω–∞–≤–µ—Ä—Ö
          }
        }
      } catch (error) {
        if (!abort) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π:", error);
        }
      } finally {
        if (!abort) setLoading(false);
      }
    })();

    return () => {
      abort = true;
    };
  }, [courseId, csId, setModules]);

  // –†–µ–Ω–¥–µ—Ä
  return (
    <>
      <p className={styles.title}>–û–±–∑–æ—Ä –∫—É—Ä—Å–∞</p>
      <button className={styles.backButton} onClick={onBack}>
        <img src={arrowIcon} alt="<" />
        –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
      </button>

      <div className={styles.containerModules}>
        {loading ? (
          <div className={styles.loaderWrapper}>
            <Loader text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π..." />
          </div>
        ) : (
          modules.map((module, index) => (
            <div key={module.id} className={styles.moduleContainer}>
              <ModuleBlock
                index={index}
                height={400}
                moduleTitle={module.title}
                lessons={module.lessons}
                tests={module.tests}
                tasks={module.tasks}
                onTitleChange={() => {}}
                onLessonAdd={() => {}}
                onLessonRemove={() => {}}
                onTestAdd={() => {}}
                onTestRemove={() => {}}
                onTaskAdd={() => {}}
                onTaskRemove={() => {}}
                onModuleRemove={() => {}}
              />
            </div>
          ))
        )}
      </div>

      <Button
        onClick={onNext}
        text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        disabled={loading || modules.length === 0}
      />
    </>
  );
};

export default OverviewCourse;
