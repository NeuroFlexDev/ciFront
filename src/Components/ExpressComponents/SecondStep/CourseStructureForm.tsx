import React, { useState } from "react";
import axios from "axios";
import Input from "@/Components/ElementUi/Input/Input";
import RadioButton from "@/Components/ElementUi/RadioButton/RadioButton";
import Checkbox from "@/Components/ElementUi/Checkbox/Checkbox";
import Button from "@/Components/ElementUi/Button/Button";
import LabelField from "@/Components/ElementUi/LabelField/LabelField";
import styles from "./styles.module.css";

interface CourseStructureFormProps {
  onBack: () => void;
  onNext: (csId: number) => void; // —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ID –Ω–∞–≤–µ—Ä—Ö
}

interface ContentTypeOption {
  id: number;
  label: string;
  checked: boolean;
}

export const CourseStructureForm = ({ onBack, onNext }: CourseStructureFormProps) => {
  const [sections, setSections] = useState("10");
  const [testsPerSection, setTestsPerSection] = useState("10");
  const [lessonsPerSection, setLessonsPerSection] = useState("10");
  const [questionsPerTest, setQuestionsPerTest] = useState("10");
  const [finalTest, setFinalTest] = useState("yes");
  const [contentTypes, setContentTypes] = useState<ContentTypeOption[]>([
    { id: 1, label: "–í–∏–¥–µ–æ", checked: false },
    { id: 2, label: "–¢–µ–∫—Å—Ç", checked: false },
    { id: 3, label: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è", checked: false },
  ]);

  const handleSubmit = async () => {
    const payload = {
      sections: parseInt(sections, 10),
      tests_per_section: parseInt(testsPerSection, 10),
      lessons_per_section: parseInt(lessonsPerSection, 10),
      questions_per_test: parseInt(questionsPerTest, 10),
      final_test: finalTest === "yes",
      content_types: contentTypes
        .filter(item => item.checked)
        .map(item => item.label),
    };

    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞:", payload);

    try {
      const response = await axios.post(
        "http://127.0.0.1:8000/api/course-structure/",
        payload
      );

      const savedStruct = response.data;
      console.log("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", savedStruct);
      onNext(savedStruct.id);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", error);
      alert(`–û—à–∏–±–∫–∞: ${error.message || error}`);
    }
  };

  return (
    <div className={styles.secontStepContainer}>
      <p className={styles.title}>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞</p>
      <div className={styles.structureDataCont}>
        <div className={styles.itemGridStructure}>
          <LabelField text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π" />
          <Input
            type="number"
            value={sections}
            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π"
            onChange={e => setSections(e.target.value)}
          />
        </div>

        <div className={styles.itemGridStructure}>
          <LabelField text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏" />
          <Input
            type="number"
            value={testsPerSection}
            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏"
            onChange={e => setTestsPerSection(e.target.value)}
          />
        </div>

        <div className={styles.itemGridStructure}>
          <LabelField text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏" />
          <Input
            type="number"
            value={lessonsPerSection}
            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏"
            onChange={e => setLessonsPerSection(e.target.value)}
          />
        </div>

        <div className={styles.itemGridStructure}>
          <LabelField text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ" />
          <Input
            type="number"
            value={questionsPerTest}
            placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ"
            onChange={e => setQuestionsPerTest(e.target.value)}
          />
        </div>

        <div className={styles.finalTest}>
          <LabelField text="–ù–∞–ª–∏—á–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞" />
          <div className={styles.radioGroup}>
            <RadioButton
              name="test-group"
              value="yes"
              label="–î–∞"
              checked={finalTest === "yes"}
              onChange={() => setFinalTest("yes")}
            />
            <RadioButton
              name="test-group"
              value="no"
              label="–ù–µ—Ç"
              checked={finalTest === "no"}
              onChange={() => setFinalTest("no")}
            />
          </div>
        </div>

        <div className={styles.finalTest}>
          <LabelField text="–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫—É—Ä—Å–µ" />
          <div className={styles.checkboxGroup}>
            {contentTypes.map(item => (
              <Checkbox
                key={item.id}
                label={item.label}
                checked={item.checked}
                onChange={e => {
                  setContentTypes(prev =>
                    prev.map(el =>
                      el.id === item.id
                        ? { ...el, checked: e.target.checked }
                        : el
                    )
                  );
                }}
              />
            ))}
          </div>
        </div>
      </div>

      <div className={styles.buttonContainer}>
        <Button text="–ù–∞–∑–∞–¥" onClick={onBack} variant="secondary" />
        <Button text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" onClick={handleSubmit} variant="primary" />
      </div>
    </div>
  );
};
