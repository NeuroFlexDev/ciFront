import React, { useState } from "react";
import { FormField } from "@/Components/ExpressComponents/FormField/FormField";
import Input from "@/Components/ElementUi/Input/Input";
import Select from "@/Components/ElementUi/Select/Select";
import UploadFile from "@/Components/ElementUi/UploadFile/UploadFile";
import Button from "@/Components/ElementUi/Button/Button";
import styles from "./styles.module.css";

// ‚úÖ –§–∏–∫—Å: —Ç–µ–ø–µ—Ä—å id –≤—Å–µ–≥–¥–∞ `number`
interface DropdownItem {
  id: number;
  name: string;
}

interface CourseInfoFormProps {
  onNext: () => void;
}

export const CourseInfoForm = ({ onNext }: CourseInfoFormProps) => {
  const [title, setTitle] = useState<string>("");
  const [description, setDescription] = useState<string>("");
  const [level, setLevel] = useState<DropdownItem | undefined>(undefined);
  const [language, setLanguage] = useState<DropdownItem | undefined>(undefined);
  const [additionalFile, setAdditionalFile] = useState<File | null>(null);

  const levels: DropdownItem[] = [
    { id: 1, name: "–ö—É—Ä—Å —Å –Ω—É–ª—è" },
    { id: 2, name: "–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö" },
    { id: 3, name: "–ú–∞—Å—Ç–µ—Ä –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏" },
  ];

  const languages: DropdownItem[] = [
    { id: 1, name: "–†—É—Å—Å–∫–∏–π" },
    { id: 2, name: "English" },
  ];

  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setTitle(e.target.value);
  };

  const handleDescriptionChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setDescription(e.target.value);
  };

  // ‚úÖ –§–∏–∫—Å: –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ id –∫ —á–∏—Å–ª—É
  const handleLevelChange = (selected?: DropdownItem) => {
    if (selected) {
      setLevel({ ...selected, id: Number(selected.id) });
    } else {
      setLevel(undefined);
    }
  };

  const handleLanguageChange = (selected?: DropdownItem) => {
    if (selected) {
      setLanguage({ ...selected, id: Number(selected.id) });
    } else {
      setLanguage(undefined);
    }
  };

  const handleSubmit = async () => {
    console.log("–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:", { title, description, level, language });

    if (!title || !description || !level || !language) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
      return;
    }

    try {
      const response = await fetch("http://127.0.0.1:8000/api/courses/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title,
          description,
          level: level.id,
          language: language.id,
        }),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞");
      }

      console.log("‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
      onNext();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö", error);
    }
  };

  return (
    <div className={styles.expressCourseContainer}>
      <p className={styles.title}>–î–∞–≤–∞–π—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º!</p>
      <div className={styles.contCont}>
        <div className={styles.fieldContainer}>
          <FormField label="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞">
            <Input
              type="text"
              placeholder="‚Äú–ö—É—Ä—Å –ø–æ –æ—Å–Ω–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ C#‚Äù"
              value={title}
              onChange={handleTitleChange}
            />
          </FormField>

          <FormField label="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞">
            <Input
              type="textarea"
              placeholder="‚Äú–ë–ª–∞–≥–æ–¥–∞—Ä—è –¥–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å Junior C# —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º‚Äù"
              rows={10}
              value={description}
              onChange={handleDescriptionChange}
            />
          </FormField>

          {/* ‚úÖ –§–∏–∫—Å: —Ç–µ–ø–µ—Ä—å value –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Select */}
          <FormField label="–£—Ä–æ–≤–µ–Ω—å –∫—É—Ä—Å–∞">
            <Select
              items={levels}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫—É—Ä—Å–∞"
              value={levels.find((item) => item.id === level?.id) || undefined} // üî• –§–∏–∫—Å
              onChange={(item) => handleLevelChange(item)}
            />
          </FormField>

          <FormField label="–Ø–∑—ã–∫ –∫—É—Ä—Å–∞">
            <Select
              items={languages}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è"
              value={languages.find((item) => item.id === language?.id) || undefined} // üî• –§–∏–∫—Å
              onChange={(item) => handleLanguageChange(item)}
            />
          </FormField>

          <FormField label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã">
            <UploadFile onFileSelect={(file) => setAdditionalFile(file)} maxSize={10 * 1024 * 1024} />
          </FormField>

          <Button text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" onClick={handleSubmit} variant="primary" />
        </div>
      </div>
    </div>
  );
};
